*-----------------------------------------------------------------------------
	SUBROUTINE AMR.B.SMS.CHARGE(ACCOUNT.NO)
*-----------------------------------------------------------------------------
* VERSION             : 1.0
* DATE CREATED        : 04/04/2020
* CREATED BY          : SWETHA S
* DESCRIPTION         : ROUTINE TO COLLECT SMS CHARGES
*                     :
* ATTACHED TO         : BATCH>BNK/AMR.B.SMS.CHARGE 
*                     :
* ATTACHED AS         : BATCH ROUTINE
* IN/OUT ARGUMENTS    : ACCOUNT NUMBER
*-----------------------------------------------------------------------------
* VERSION             : 2.0
* DATE MODIFIED       : 30/08/2021
* MODIFIED BY         : RASY
* MODIFICATION DETAIL : CHG0033780 - issue not charge SMS & Email monthly fee
*-----------------------------------------------------------------------------
    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.ACCOUNT
    $INSERT I_F.AMR.SMS.SUBS
    $INSERT I_F.AMR.H.INTF.PARAM
    $INSERT I_AMR.B.SMS.CHARGE.COMMON
    $INSERT I_F.DE.PRODUCT
    $INSERT I_F.FUNDS.TRANSFER
    
    GOSUB HANDLE.FATAL.ERROR
    GOSUB PROCESS

    IF R.DE.PRODUCT THEN
        GOSUB CALC.CHARGE
    END
    RETURN

*-----------------------------------------------------------------------------
HANDLE.FATAL.ERROR:
*-----------------------------------------------------------------------------
    IF ACCOUNT.NO EQ '' THEN
        Y.MESSAGE  = "RECORD SELECTION ERROR - SUBSCRIBED ACCOUNT NOT FOUND"
        Y.MESSAGE.INFO<1> = "AMR.B.SMS.CHARGE"
        Y.MESSAGE.INFO<2> = ''
        Y.MESSAGE.INFO<2> = ''
        Y.MESSAGE.INFO<3> = ''
        Y.MESSAGE.INFO<4> = Y.MESSAGE
        Y.MESSAGE.INFO<5> = ''
        TEXT = Y.MESSAGE
        CALL FATAL.ERROR(Y.MESSAGE.INFO)
    END
    RETURN

*-----------------------------------------------------------------------------
PROCESS:
*-----------------------------------------------------------------------------
	Y.ACCOUNT = ACCOUNT.NO

	Y.TODAY = TODAY
	Y.TMP.FREQ.DATE = ''
	
	LREF.APP = "AMR.SMS.SUBS":@FM:"FUNDS.TRANSFER"
    LREF.FLD = "AMR.ERROR.DETAI":@FM:"AMR.NARRATIVE"
    LREF.POS = ""
    CALL MULTI.GET.LOC.REF(LREF.APP,LREF.FLD,LREF.POS)
    AMR.ERR.DETAIL.POS = LREF.POS<1,1>
	AMR.NARRATIVE.POS = LREF.POS<2,1>

	CALL F.READ(FN.ACCOUNT,Y.ACCOUNT,REC.ACCOUNT,F.ACCOUNT,ERR.ACCOUNT)
    Y.CUSTOMER = REC.ACCOUNT<AC.CUSTOMER>
    Y.CURRENCY = REC.ACCOUNT<AC.CURRENCY>
    Y.WORKING.BALANCE = REC.ACCOUNT<AC.WORKING.BALANCE>

    CALL F.READ(FN.AMR.SMS.SUBS,Y.ACCOUNT,R.AMR.SMS.SUBS,F.AMR.SMS.SUBS,E.AMR.SMS.SUBS)
    Y.NOTIFICATION.TYPE = R.AMR.SMS.SUBS<AMR.SMS.SMS.NOTIFICATION.TYPE>
	Y.NOTIFICATION.TYPE.CNT = DCOUNT(Y.NOTIFICATION.TYPE,VM)

    Y.CHARGE.YES.NO = R.AMR.SMS.SUBS<AMR.SMS.CHARGE>

    Y.SMS.FEE.PER.UNIT = R.AMR.SMS.SUBS<AMR.SMS.MONTHLY.SMS.FEE.PER.UNIT>
    Y.EMAIL.FEE.PER.UNIT = R.AMR.SMS.SUBS<AMR.SMS.MONTHLY.EMAIL.FEE.PER.UNIT>

    Y.FREQ.DATE = R.AMR.SMS.SUBS<AMR.SMS.FREQ.DATE>
	Y.FREQ.DATE.CNT = DCOUNT(Y.FREQ.DATE,VM)

    Y.DE.PRODUCT.1 = 'KH0010001.A-':Y.ACCOUNT:'.8240.AC'
    Y.DE.PRODUCT.2 = 'KH0010001.C-':Y.CUSTOMER:'.8240.AC'

    CALL F.READ(FN.DE.PRODUCT,Y.DE.PRODUCT.1,R.DE.PRODUCT,F.DE.PRODUCT,E.DE.PRODUCT)
	IF R.DE.PRODUCT ELSE
        CALL F.READ(FN.DE.PRODUCT,Y.DE.PRODUCT.2,R.DE.PRODUCT,F.DE.PRODUCT,E.DE.PRODUCT)
    END
    RETURN

*-----------------------------------------------------------------------------
CALC.CHARGE:
*-----------------------------------------------------------------------------
    Y.CHARGE.AMOUNT = 0
	Y.SMS.FLAG = 'N'
	Y.EML.FLAG = 'N'
	
	Y.CARRIER.ADDR.NO = R.DE.PRODUCT<DE.PRD.CARR.ADD.NO>
    Y.SMS.COUNT = COUNT(Y.CARRIER.ADDR.NO,'SMS')
    Y.EMAIL.COUNT = COUNT(Y.CARRIER.ADDR.NO,'EMAIL')
    
    Y.SMS.AMT = Y.SMS.FEE.PER.UNIT * Y.SMS.COUNT
    Y.EMAIL.AMT = Y.EMAIL.FEE.PER.UNIT * Y.EMAIL.COUNT

	FOR Y.I = 1 TO Y.NOTIFICATION.TYPE.CNT
		GOSUB ADD.CHARGE.AMTS
		
		IF Y.CHARGE.AMOUNT GT 0 THEN
            IF Y.CHARGE.AMOUNT LE Y.WORKING.BALANCE THEN
                GOSUB MAKE.PAYMENT
            END
            ELSE
				GOSUB SET.CONDITION
				
				IF Y.SUG.IND.UPD EQ 'Y' THEN
					GOSUB UNSUBSCRIBE
				END
            END
        END
	NEXT Y.I
    RETURN

*-----------------------------------------------------------------------------
ADD.CHARGE.AMTS:
*-----------------------------------------------------------------------------
    Y.TMP.FREQ.DATE = Y.FREQ.DATE<1,Y.I>
	Y.TMP.NTF.TYPE = Y.NOTIFICATION.TYPE<1,Y.I>
	
	IF Y.TMP.FREQ.DATE THEN
		;* declare FREQ for next schedule date
		Y.NEXT.DATE = Y.TMP.FREQ.DATE
		Y.SIGN = '+'
		Y.DISPLACEMENT = '1M'
		CALL CALENDAR.DAY(Y.NEXT.DATE,Y.SIGN,Y.DISPLACEMENT)
		Y.NEXT.DATE = Y.DISPLACEMENT
	END
	ELSE
		Y.TMP.FREQ.DATE = Y.TODAY
		;* declare FREQ for next schedule date
		Y.NEXT.DATE = Y.TMP.FREQ.DATE
		Y.SIGN = '+'
		Y.DISPLACEMENT = '1M'
		CALL CALENDAR.DAY(Y.NEXT.DATE,Y.SIGN,Y.DISPLACEMENT)
		Y.NEXT.DATE = Y.DISPLACEMENT
	END
	
    BEGIN CASE
        CASE Y.TMP.NTF.TYPE EQ 'SMS'
            Y.AMT.TO.ADD = Y.SMS.AMT
			Y.SMS.FLAG = 'Y'
			Y.EML.FLAG = 'N'

        CASE Y.TMP.NTF.TYPE EQ 'EMAIL'
            Y.AMT.TO.ADD = Y.EMAIL.AMT
			Y.EML.FLAG = 'Y'
			Y.SMS.FLAG = 'N'
    END CASE

	IF Y.TMP.FREQ.DATE EQ Y.TODAY THEN
		AMR.FREQREC = ''
		AMR.FREQREC<AMR.SMS.FREQ.DATE,Y.I> = Y.NEXT.DATE
		AMR.FREQREC<AMR.SMS.LOCAL.REF,AMR.ERR.DETAIL.POS,Y.I> = ''

		IF Y.CHARGE.YES.NO<1,Y.I> EQ 'NO' THEN
			GOSUB UPDATE.FREQ.DATE
		END
		ELSE
			Y.CHARGE.AMOUNT = Y.AMT.TO.ADD
		END
	END

	;* clear AMT for new calculation
    Y.AMT.TO.ADD = 0
    RETURN

*-----------------------------------------------------------------------------
MAKE.PAYMENT:
*-----------------------------------------------------------------------------
	V.THEIR.REF = 'SMS Fee ':Y.TMP.FREQ.DATE

    AMR.APP.NAME = 'FUNDS.TRANSFER'
	AMR.OFSVERSION = 'FUNDS.TRANSFER,AMR.OFS'
    AMR.OFSFUNCT = 'I'
    AMR.PROCESS = 'PROCESS'
    AMR.GTSMODE = ''
    AMR.NO.OF.AUTH = '0'
    AMR.TRANSACTION.ID = ''

	AMR.RECORD = ''
    AMR.OFSRECORD = ''

    Y.PARAM = 'SMSCHGPL'
    CALL F.READ(FN.PARAM,Y.PARAM,R.PARAM,F.PARAM,E.PARAM)
    Y.PL.CATEGORY = R.PARAM<AIP.VALUE.FROM>

    AMR.RECORD<FT.TRANSACTION.TYPE> = 'ACSF'
    AMR.RECORD<FT.DEBIT.ACCT.NO> = ACCOUNT.NO
    AMR.RECORD<FT.CREDIT.ACCT.NO> = Y.PL.CATEGORY
    AMR.RECORD<FT.CREDIT.CURRENCY> = Y.CURRENCY
    AMR.RECORD<FT.CREDIT.AMOUNT> = Y.CHARGE.AMOUNT
	AMR.RECORD<FT.DEBIT.THEIR.REF> = V.THEIR.REF
	AMR.RECORD<FT.CREDIT.THEIR.REF> = V.THEIR.REF
	AMR.RECORD<FT.ORDERING.CUST> = V.THEIR.REF
	AMR.RECORD<FT.LOCAL.REF,AMR.NARRATIVE.POS> = V.THEIR.REF
    
    CALL OFS.BUILD.RECORD(AMR.APP.NAME,AMR.OFSFUNCT,AMR.PROCESS,AMR.OFSVERSION,AMR.GTSMODE,AMR.NO.OF.AUTH,AMR.TRANSACTION.ID,AMR.RECORD,AMR.OFSRECORD)
    
    REQUEST = AMR.OFSRECORD
    OPTIONS = 'GENERIC.OFS.PROCESS'
    TXNCOMMITTED = ''
    CALL OFS.CALL.BULK.MANAGER(OPTIONS,REQUEST,RESPONSE,TXNCOMMITTED)

	GOSUB UPDATE.FREQ.DATE
    RETURN

*-----------------------------------------------------------------------------
UPDATE.FREQ.DATE:
*-----------------------------------------------------------------------------
	AMR.APP.NAME1 = 'AMR.SMS.SUBS'
	AMR.OFSVERSION1 = 'AMR.SMS.SUBS,TM.AMR'
    AMR.OFSFUNCT1 = 'I'
    AMR.PROCESS1 = 'PROCESS'
    AMR.GTSMODE1 = ''
    AMR.NO.OF.AUTH1 = '0'
    AMR.TRANSACTION.ID1 = ACCOUNT.NO

    AMR.RECORD1 = ''
    AMR.OFSRECORD1 = ''
 
    AMR.RECORD1 = AMR.FREQREC
	
    CALL OFS.BUILD.RECORD(AMR.APP.NAME1,AMR.OFSFUNCT1,AMR.PROCESS1,AMR.OFSVERSION1,AMR.GTSMODE1,AMR.NO.OF.AUTH1,AMR.TRANSACTION.ID1,AMR.RECORD1,AMR.OFSRECORD1)

    REQUEST1 = AMR.OFSRECORD1
    OPTIONS1 = 'GENERIC.OFS.PROCESS'
    TXNCOMMITTED1 = ''
    CALL OFS.CALL.BULK.MANAGER(OPTIONS1,REQUEST1,RESPONSE1,TXNCOMMITTED1)
    RETURN

*-----------------------------------------------------------------------------
UNSUBSCRIBE:
*-----------------------------------------------------------------------------
    AMR.APP.NAME = 'AMR.SMS.SUBS'
	AMR.OFSVERSION = 'AMR.SMS.SUBS,TM.AMR'
    AMR.OFSFUNCT = 'I'
    AMR.PROCESS = 'PROCESS'
    AMR.GTSMODE = ''
    AMR.NO.OF.AUTH = '0'
    AMR.TRANSACTION.ID = ACCOUNT.NO

    AMR.RECORD = ''
    AMR.OFSRECORD = ''
 
    AMR.RECORD<AMR.SMS.SMS.SUBS.INDICATOR> = 'NO'
	AMR.RECORD<AMR.SMS.LOCAL.REF,AMR.ERR.DETAIL.POS> = 'Insufficient balance - system auto unsubscribe'
    
    CALL OFS.BUILD.RECORD(AMR.APP.NAME,AMR.OFSFUNCT,AMR.PROCESS,AMR.OFSVERSION,AMR.GTSMODE,AMR.NO.OF.AUTH,AMR.TRANSACTION.ID,AMR.RECORD,AMR.OFSRECORD)
    
    REQUEST = AMR.OFSRECORD
    OPTIONS = 'GENERIC.OFS.PROCESS'
    TXNCOMMITTED = ''
    CALL OFS.CALL.BULK.MANAGER(OPTIONS,REQUEST,RESPONSE,TXNCOMMITTED)
	RETURN

*-----------------------------------------------------------------------------
SET.CONDITION:
*-----------------------------------------------------------------------------
	IF Y.I EQ 1 THEN
		Y.SUG.IND.UPD = 'Y'
		GOSUB PROCESS.NO
	END
	ELSE IF Y.I EQ 2 THEN
		Y.SUG.IND.UPD = 'N'
		GOSUB PROCESS.NO
	END
	RETURN

*-----------------------------------------------------------------------------
PROCESS.NO:
*-----------------------------------------------------------------------------
	AMR.APP.NAME2 = 'DE.PRODUCT'
	AMR.OFSVERSION2 = 'DE.PRODUCT,AMR.INPUT'
    AMR.OFSFUNCT2 = 'I'
    AMR.PROCESS2 = 'PROCESS'
    AMR.GTSMODE2 = ''
    AMR.NO.OF.AUTH2 = '0'
	
	Y.CARRIER = R.DE.PRODUCT<DE.PRD.CARR.ADD.NO>
    Y.CARRIER.CNT = DCOUNT(Y.CARRIER,VM)
	
	Y.AMR.PRODUCT.ID1 = 'KH0010001.A-':Y.ACCOUNT:'.8230.AC'
	Y.AMR.PRODUCT.ID2 = 'KH0010001.A-':Y.ACCOUNT:'.8240.AC'
	
	Y.MOBILE = 'MOBILE.1'

	LOCATE Y.MOBILE IN R.DE.PRODUCT<DE.PRD.CARR.ADD.NO,1> SETTING POS1 THEN
		AMR.PRDREC = ''
		AMR.PRDREC<DE.PRD.CARR.ADD.NO,1> = Y.MOBILE
		AMR.PRDREC<DE.PRD.TRANSLATION,1> = 'GB'
		
		;* case reflect on contrary notification type to set new DE value
		BEGIN CASE
        CASE Y.SMS.FLAG EQ 'Y'
			AMR.PRDREC<DE.PRD.CARR.ADD.NO,2> = 'EMAIL.1'
			AMR.PRDREC<DE.PRD.TRANSLATION,2> = 'GB'

        CASE Y.EML.FLAG EQ 'Y'
			AMR.PRDREC<DE.PRD.CARR.ADD.NO,2> = 'SMS.1'
			AMR.PRDREC<DE.PRD.TRANSLATION,2> = 'GB'
		END CASE
		
		IF Y.CARRIER.CNT GE 1 THEN
			GOSUB DELETE.DE.PRODUCT
			
			AMR.RECORD2 = ''
			AMR.OFSRECORD2 = ''
			AMR.OFSRECORD3 = ''

			AMR.RECORD2 = AMR.PRDREC

            CALL OFS.BUILD.RECORD(AMR.APP.NAME2,AMR.OFSFUNCT2,AMR.PROCESS2,AMR.OFSVERSION2,AMR.GTSMODE2,AMR.NO.OF.AUTH2,Y.AMR.PRODUCT.ID1,AMR.RECORD2,AMR.OFSRECORD2)
			CALL OFS.BUILD.RECORD(AMR.APP.NAME2,AMR.OFSFUNCT2,AMR.PROCESS2,AMR.OFSVERSION2,AMR.GTSMODE2,AMR.NO.OF.AUTH2,Y.AMR.PRODUCT.ID2,AMR.RECORD2,AMR.OFSRECORD3)

			REQUEST1 = AMR.OFSRECORD2
			REQUEST2 = AMR.OFSRECORD3
			OPTIONS = 'GENERIC.OFS.PROCESS'
			TXNCOMMITTED = ''
			CALL OFS.CALL.BULK.MANAGER(OPTIONS,REQUEST1,RESPONSE,TXNCOMMITTED)
			CALL OFS.CALL.BULK.MANAGER(OPTIONS,REQUEST2,RESPONSE,TXNCOMMITTED)
		END
	END
	ELSE
		AMR.PRDREC = ''

		;* case reflect on contrary notification type to set new DE value
		BEGIN CASE
        CASE Y.SMS.FLAG EQ 'Y'
			AMR.PRDREC<DE.PRD.CARR.ADD.NO,1> = 'EMAIL.1'
			AMR.PRDREC<DE.PRD.TRANSLATION,1> = 'GB'

        CASE Y.EML.FLAG EQ 'Y'
			AMR.PRDREC<DE.PRD.CARR.ADD.NO,1> = 'SMS.1'
			AMR.PRDREC<DE.PRD.TRANSLATION,1> = 'GB'
		END CASE
	
		GOSUB DELETE.DE.PRODUCT
		
		AMR.RECORD2 = ''
		AMR.OFSRECORD2 = ''
		AMR.OFSRECORD3 = ''

		AMR.RECORD2 = AMR.PRDREC

        CALL OFS.BUILD.RECORD(AMR.APP.NAME2,AMR.OFSFUNCT2,AMR.PROCESS2,AMR.OFSVERSION2,AMR.GTSMODE2,AMR.NO.OF.AUTH2,Y.AMR.PRODUCT.ID1,AMR.RECORD2,AMR.OFSRECORD2)
		CALL OFS.BUILD.RECORD(AMR.APP.NAME2,AMR.OFSFUNCT2,AMR.PROCESS2,AMR.OFSVERSION2,AMR.GTSMODE2,AMR.NO.OF.AUTH2,Y.AMR.PRODUCT.ID2,AMR.RECORD2,AMR.OFSRECORD3)

		REQUEST1 = AMR.OFSRECORD2
		REQUEST2 = AMR.OFSRECORD3
		OPTIONS = 'GENERIC.OFS.PROCESS'
		TXNCOMMITTED = ''
		CALL OFS.CALL.BULK.MANAGER(OPTIONS,REQUEST1,RESPONSE,TXNCOMMITTED)
		CALL OFS.CALL.BULK.MANAGER(OPTIONS,REQUEST2,RESPONSE,TXNCOMMITTED)
	END
    RETURN

*-----------------------------------------------------------------------------
DELETE.DE.PRODUCT:
*-----------------------------------------------------------------------------
* delete all DE.PRODUCT records
    CALL F.DELETE(FN.DE.PRODUCT,Y.AMR.PRODUCT.ID1) ;* CR
    CALL F.DELETE(FN.DE.PRODUCT,Y.AMR.PRODUCT.ID2) ;* DR
	RETURN
END
